[{"path":"https://osgeo.github.io/rgrass/CONTRIBUTING.html","id":"contributing-to-rgrass","dir":"","previous_headings":"","what":"Contributing to rgrass","title":"NA","text":"outlines propose change rgrass. package supports GRASS GIS 7 8 available CRAN.","code":""},{"path":"https://osgeo.github.io/rgrass/CONTRIBUTING.html","id":"how-to-propose-a-change-to-rgrass","dir":"","previous_headings":"","what":"How to propose a change to rgrass","title":"NA","text":"main branch development branch rgrass. like contribute rgrass, please target PRs contributions branch.","code":""},{"path":"https://osgeo.github.io/rgrass/CONTRIBUTING.html","id":"note","dir":"","previous_headings":"","what":"Note","title":"NA","text":"rgrass package successor rgrass7 package. rgrass7 branch “target” maintenance source rgrass7 package, time rgrass7 rgrass coexisted. rgrass7 development longer continued; package archived CRAN. rgrass7 branch kept reference .","code":""},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Coercion between object formats","text":"original R-GRASS interface (R. S. Bivand 2000; Neteler Mitasova 2008) designed move raster later vector data R GRASS GIS. , use made intermediate files, often using external GDAL library sides. R side, rgdal now archived package used, interfacing GDAL PROJ GRASS GIS also . GRASS commands r..gdal, r..gdal, v..ogr v..ogr matched rgdal functions using underlying external libraries:  GDAL supplemented raster data simply reading writing uncompressed binary files using r..bin r..bin, custom functions R side. written, R-GRASS interface used sp classes raster vector data, supplemented recently sf classes vector data . current version R-GRASS interface simplified use terra package , like sf rgdal , links important external libraries. workhorse driver known RRASTER, widely used raster terra (see also (https://rspatial.org)). uses GDAL writes flat uncompressed binary file. Using terra::rast() also appears preserve category names colour tables, needs testing (see (https://github.com/osgeo/rgrass/issues/42)).  GDAL 3.5.0, RRASTER driver also supports WKT2_2019 CRS representations; earlier versions GDAL, driver supported proj-string representation (https://github.com/osgeo/rgrass/issues/51). changes mean users transferring data R GRASS need coerce terra classes SpatVector SpatRaster class system choice. addition, SpatRaster read memory file required, requiring care.","code":""},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"loading-and-attaching-packages","dir":"Articles","previous_headings":"","what":"Loading and attaching packages","title":"Coercion between object formats","text":"vignette constructed conditioning availability aforementioned R packages, .e. missing time package building, code blocks displayed. loading attaching, terra displays version: terra::gdal() tells us versions external libraries used terra: using CRAN binary packages built static Windows macOS, R packages use versions external libraries, necessarily versions GRASS installed.","code":"library(\"terra\") ## terra 1.8.5 library(\"sf\") ## Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(\"sp\") library(\"stars\") ## Loading required package: abind library(\"raster\") gdal(lib = \"all\") ##     gdal     proj     geos  ##  \"3.4.1\"  \"8.2.1\" \"3.10.2\""},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"spatvector-coercion","dir":"Articles","previous_headings":"","what":"\"SpatVector\" coercion","title":"Coercion between object formats","text":"terra package (Hijmans 2022b), vector data held \"SpatVector\" objects. means read_VECT() used, \"SpatVector\" object returned, class object needed write_VECT() writing GRASS. objects always held memory, inMemory() method: coordinate reference system expressed WKT2-2019 form:","code":"fv <- system.file(\"ex/lux.shp\", package = \"terra\") (v <- vect(fv)) ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 12, 6  (geometries, attributes) ##  extent      : 5.74414, 6.528252, 49.44781, 50.18162  (xmin, xmax, ymin, ymax) ##  source      : lux.shp ##  coord. ref. : lon/lat WGS 84 (EPSG:4326)  ##  names       :  ID_1   NAME_1  ID_2   NAME_2  AREA       POP ##  type        : <num>    <chr> <num>    <chr> <num>     <num> ##  values      :     1 Diekirch     1 Clervaux   312 1.808e+04 ##                    1 Diekirch     2 Diekirch   218 3.254e+04 ##                    1 Diekirch     3  Redange   259 1.866e+04 try(inMemory(v)) ## Error : unable to find an inherited method for function 'inMemory' for signature 'x = \"SpatVector\"' cat(crs(v), \"\\n\") ## GEOGCRS[\"WGS 84\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433]], ##     CS[ellipsoidal,2], ##         AXIS[\"geodetic latitude (Lat)\",north, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433]], ##         AXIS[\"geodetic longitude (Lon)\",east, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433]], ##     ID[\"EPSG\",4326]]"},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"sf","dir":"Articles","previous_headings":"\"SpatVector\" coercion","what":"\"sf\"","title":"Coercion between object formats","text":"new work use vector classes defined sf package (Pebesma 2022, 2018). case, coercion uses st_as_sf(): vect() method get sf terra:","code":"v_sf <- st_as_sf(v) v_sf ## Simple feature collection with 12 features and 6 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.74414 ymin: 49.44781 xmax: 6.528252 ymax: 50.18162 ## Geodetic CRS:  WGS 84 ## First 10 features: ##    ID_1       NAME_1 ID_2           NAME_2 AREA    POP ## 1     1     Diekirch    1         Clervaux  312  18081 ## 2     1     Diekirch    2         Diekirch  218  32543 ## 3     1     Diekirch    3          Redange  259  18664 ## 4     1     Diekirch    4          Vianden   76   5163 ## 5     1     Diekirch    5            Wiltz  263  16735 ## 6     2 Grevenmacher    6       Echternach  188  18899 ## 7     2 Grevenmacher    7           Remich  129  22366 ## 8     2 Grevenmacher   12     Grevenmacher  210  29828 ## 9     3   Luxembourg    8         Capellen  185  48187 ## 10    3   Luxembourg    9 Esch-sur-Alzette  251 176820 ##                          geometry ## 1  POLYGON ((6.026519 50.17767... ## 2  POLYGON ((6.178368 49.87682... ## 3  POLYGON ((5.881378 49.87015... ## 4  POLYGON ((6.131309 49.97256... ## 5  POLYGON ((5.977929 50.02602... ## 6  POLYGON ((6.385532 49.83703... ## 7  POLYGON ((6.316665 49.62337... ## 8  POLYGON ((6.425158 49.73164... ## 9  POLYGON ((5.998312 49.69992... ## 10 POLYGON ((6.039474 49.44826... v_sf_rt <- vect(v_sf) v_sf_rt ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 12, 6  (geometries, attributes) ##  extent      : 5.74414, 6.528252, 49.44781, 50.18162  (xmin, xmax, ymin, ymax) ##  coord. ref. : lon/lat WGS 84 (EPSG:4326)  ##  names       :  ID_1   NAME_1  ID_2   NAME_2  AREA       POP ##  type        : <num>    <chr> <num>    <chr> <num>     <num> ##  values      :     1 Diekirch     1 Clervaux   312 1.808e+04 ##                    1 Diekirch     2 Diekirch   218 3.254e+04 ##                    1 Diekirch     3  Redange   259 1.866e+04 all.equal(v_sf_rt, v, check.attributes = FALSE) ## [1] TRUE"},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"spatial","dir":"Articles","previous_headings":"\"SpatVector\" coercion","what":"\"Spatial\"","title":"Coercion between object formats","text":"coerce vector classes defined sp package (Roger S. Bivand, Pebesma, Gomez-Rubio 2013), methods raster used intermediate step:","code":"v_sp <- as(v, \"Spatial\") print(summary(v_sp)) ## Object of class SpatialPolygonsDataFrame ## Coordinates: ##        min       max ## x  5.74414  6.528252 ## y 49.44781 50.181622 ## Is projected: FALSE  ## proj4string : [+proj=longlat +datum=WGS84 +no_defs] ## Data attributes: ##       ID_1          NAME_1               ID_2          NAME_2          ##  Min.   :1.000   Length:12          Min.   : 1.00   Length:12          ##  1st Qu.:1.000   Class :character   1st Qu.: 3.75   Class :character   ##  Median :2.000   Mode  :character   Median : 6.50   Mode  :character   ##  Mean   :1.917                      Mean   : 6.50                      ##  3rd Qu.:3.000                      3rd Qu.: 9.25                      ##  Max.   :3.000                      Max.   :12.00                      ##       AREA            POP         ##  Min.   : 76.0   Min.   :  5163   ##  1st Qu.:187.2   1st Qu.: 18518   ##  Median :225.5   Median : 26097   ##  Mean   :213.4   Mean   : 50167   ##  3rd Qu.:253.0   3rd Qu.: 36454   ##  Max.   :312.0   Max.   :182607 v_sp_rt <- vect(st_as_sf(v_sp)) all.equal(v_sp_rt, v, check.attributes = FALSE) ## [1] TRUE"},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"spatraster-coercion","dir":"Articles","previous_headings":"","what":"\"SpatRaster\" coercion","title":"Coercion between object formats","text":"terra package, raster data held \"SpatRaster\" objects. means read_RAST() used, \"SpatRaster\" object returned, class object needed write_RAST() writing GRASS. general, \"SpatRaster\" objects files, rather data held memory:","code":"fr <- system.file(\"ex/elev.tif\", package = \"terra\") (r <- rast(fr)) ## class       : SpatRaster  ## dimensions  : 90, 95, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326)  ## source      : elev.tif  ## name        : elevation  ## min value   :       141  ## max value   :       547 try(inMemory(r)) ## [1] FALSE"},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"stars","dir":"Articles","previous_headings":"\"SpatRaster\" coercion","what":"\"stars\"","title":"Coercion between object formats","text":"stars package (Pebesma 2021) uses GDAL sf. coercion method provided \"SpatRaster\" \"stars\": round-trips memory. coercing \"stars_proxy\" applies: coercion \"stars_proxy\" also reading data memory:","code":"r_stars <- st_as_stars(r) print(r_stars) ## stars object with 2 dimensions and 1 attribute ## attribute(s): ##           Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's ## elev.tif   141     291    333 348.3366     406  547 3942 ## dimension(s): ##   from to offset     delta refsys point x/y ## x    1 95  5.742  0.008333 WGS 84 FALSE [x] ## y    1 90  50.19 -0.008333 WGS 84 FALSE [y] (r_stars_rt <- rast(r_stars)) ## class       : SpatRaster  ## dimensions  : 90, 95, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326)  ## source(s)   : memory ## name        : elev.tif  ## min value   :      141  ## max value   :      547 (r_stars_p <- st_as_stars(r, proxy = TRUE)) ## stars_proxy object with 1 attribute in 1 file(s): ## $elev.tif ## [1] \"[...]/elev.tif\" ##  ## dimension(s): ##   from to offset     delta refsys point x/y ## x    1 95  5.742  0.008333 WGS 84 FALSE [x] ## y    1 90  50.19 -0.008333 WGS 84 FALSE [y] (r_stars_p_rt <- rast(r_stars_p)) ## class       : SpatRaster  ## dimensions  : 90, 95, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326)  ## source      : elev.tif  ## name        : elevation  ## min value   :       141  ## max value   :       547"},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"rasterlayer","dir":"Articles","previous_headings":"\"SpatRaster\" coercion","what":"\"RasterLayer\"","title":"Coercion between object formats","text":"version 3.6-3 raster package (Hijmans 2022a) uses terra GDAL operations. , coercing \"SpatRaster\" object \"RasterLayer\" object simple: WKT2-2019 CRS representation present shown default: object (held file rather memory) can round-tripped:","code":"(r_RL <- raster(r)) ## class      : RasterLayer  ## dimensions : 90, 95, 8550  (nrow, ncol, ncell) ## resolution : 0.008333333, 0.008333333  (x, y) ## extent     : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## crs        : +proj=longlat +datum=WGS84 +no_defs  ## source     : elev.tif  ## names      : elevation  ## values     : 141, 547  (min, max) inMemory(r_RL) ## [1] FALSE cat(wkt(r_RL), \"\\n\") ## GEOGCRS[\"unknown\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]], ##         ID[\"EPSG\",6326]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433], ##         ID[\"EPSG\",8901]], ##     CS[ellipsoidal,2], ##         AXIS[\"longitude\",east, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]], ##         AXIS[\"latitude\",north, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]]] (r_RL_rt <- rast(r_RL)) ## class       : SpatRaster  ## dimensions  : 90, 95, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## coord. ref. : +proj=longlat +datum=WGS84 +no_defs  ## source      : elev.tif  ## name        : elevation  ## min value   :       141  ## max value   :       547"},{"path":"https://osgeo.github.io/rgrass/articles/coerce.html","id":"spatial-1","dir":"Articles","previous_headings":"\"SpatRaster\" coercion","what":"\"Spatial\"","title":"Coercion between object formats","text":"\"RasterLayer\" objects can used coercion \"SpatRaster\" object \"SpatialGridDataFrame\" object: WKT2-2019 CRS representation present shown default: object can round-tripped, use raster forefronts Proj.4 string CRS representation: Coercion sp \"SpatialGridDataFrame\" representation also provided stars: can round-tripped: ``","code":"r_sp_RL <- as(r_RL, \"SpatialGridDataFrame\") summary(r_sp_RL) ## Object of class SpatialGridDataFrame ## Coordinates: ##          min       max ## s1  5.741667  6.533333 ## s2 49.441667 50.191667 ## Is projected: FALSE  ## proj4string : [+proj=longlat +datum=WGS84 +no_defs] ## Grid attributes: ##    cellcentre.offset    cellsize cells.dim ## s1          5.745833 0.008333333        95 ## s2         49.445833 0.008333333        90 ## Data attributes: ##    elevation     ##  Min.   :141.0   ##  1st Qu.:291.0   ##  Median :333.0   ##  Mean   :348.3   ##  3rd Qu.:406.0   ##  Max.   :547.0   ##  NA's   :3942 cat(wkt(r_sp_RL), \"\\n\") ## GEOGCRS[\"unknown\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]], ##         ID[\"EPSG\",6326]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433], ##         ID[\"EPSG\",8901]], ##     CS[ellipsoidal,2], ##         AXIS[\"longitude\",east, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]], ##         AXIS[\"latitude\",north, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]]] (r_sp_RL_rt <- raster(r_sp_RL)) ## class      : RasterLayer  ## dimensions : 90, 95, 8550  (nrow, ncol, ncell) ## resolution : 0.008333333, 0.008333333  (x, y) ## extent     : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## crs        : +proj=longlat +datum=WGS84 +no_defs  ## source     : memory ## names      : elevation  ## values     : 141, 547  (min, max) cat(wkt(r_sp_RL_rt), \"\\n\") ## GEOGCRS[\"unknown\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]], ##         ID[\"EPSG\",6326]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433], ##         ID[\"EPSG\",8901]], ##     CS[ellipsoidal,2], ##         AXIS[\"longitude\",east, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]], ##         AXIS[\"latitude\",north, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]]] (r_sp_rt <- rast(r_sp_RL_rt)) ## class       : SpatRaster  ## dimensions  : 90, 95, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## coord. ref. : +proj=longlat +datum=WGS84 +no_defs  ## source(s)   : memory ## name        : elevation  ## min value   :       141  ## max value   :       547 crs(r_sp_RL_rt) ## Coordinate Reference System: ## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs  ## WKT2 2019 representation: ## GEOGCRS[\"unknown\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]], ##         ID[\"EPSG\",6326]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433], ##         ID[\"EPSG\",8901]], ##     CS[ellipsoidal,2], ##         AXIS[\"longitude\",east, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]], ##         AXIS[\"latitude\",north, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]]] r_sp_stars <- as(r_stars, \"Spatial\") summary(r_sp_stars) ## Object of class SpatialGridDataFrame ## Coordinates: ##         min       max ## x  5.741667  6.533333 ## y 49.441667 50.191667 ## Is projected: FALSE  ## proj4string : [+proj=longlat +datum=WGS84 +no_defs] ## Grid attributes: ##   cellcentre.offset    cellsize cells.dim ## x          5.745833 0.008333333        95 ## y         49.445833 0.008333333        90 ## Data attributes: ##     elev.tif     ##  Min.   :141.0   ##  1st Qu.:291.0   ##  Median :333.0   ##  Mean   :348.3   ##  3rd Qu.:406.0   ##  Max.   :547.0   ##  NA's   :3942 cat(wkt(r_sp_stars), \"\\n\") ## GEOGCRS[\"WGS 84\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433]], ##     CS[ellipsoidal,2], ##         AXIS[\"geodetic latitude (Lat)\",north, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433]], ##         AXIS[\"geodetic longitude (Lon)\",east, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433]], ##     ID[\"EPSG\",4326]] (r_sp_stars_rt <- rast(st_as_stars(r_sp_stars))) ## class       : SpatRaster  ## dimensions  : 90, 95, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326)  ## source(s)   : memory ## name        : elev.tif  ## min value   :      141  ## max value   :      547 cat(crs(r_sp_rt), \"\\n\") ## GEOGCRS[\"unknown\", ##     DATUM[\"World Geodetic System 1984\", ##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ##             LENGTHUNIT[\"metre\",1]], ##         ID[\"EPSG\",6326]], ##     PRIMEM[\"Greenwich\",0, ##         ANGLEUNIT[\"degree\",0.0174532925199433], ##         ID[\"EPSG\",8901]], ##     CS[ellipsoidal,2], ##         AXIS[\"longitude\",east, ##             ORDER[1], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]], ##         AXIS[\"latitude\",north, ##             ORDER[2], ##             ANGLEUNIT[\"degree\",0.0174532925199433, ##                 ID[\"EPSG\",9122]]]]"},{"path":[]},{"path":"https://osgeo.github.io/rgrass/articles/use.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Use of GRASS interface","text":"original R-GRASS interface (Bivand 2000; Neteler Mitasova 2008) written mainly permit R objects represented sp class objects moved GRASS, GRASS objects moved R statistical analysis. spgrass6 0.6-3 (April 2009) following fruitful workshop Queen’s University, Belfast, interface re-written use --interface-description flag provided GRASS command, also used Python interface GRASS commands. Command interface descriptions parsed XML cached R objects efficiency. current version R-GRASS interface contained package, rgrass. addition, R function initGRASS() written permit GRASS started within GRASS return .","code":""},{"path":"https://osgeo.github.io/rgrass/articles/use.html","id":"starting-r-inside-grass","dir":"Articles","previous_headings":"","what":"Starting R inside GRASS","title":"Use of GRASS interface","text":"starting GRASS GIS terminal console (GRASS 8.3.2), one can continue GRASS terminal console, starting interactive R session (R 4.3.3). Loading attaching R-GRASS interface package rgrass R session, see current GRASS location detected reported: Since rgrass knows current location, can example use execGRASS() list GRASS rasters PERMANENT mapset standard North Carolina basic data set (https://grass.osgeo.org/sampledata/north_carolina/nc_basic_spm_grass7.zip): Leaving R returns us GRASS terminal console, can also exit. R can also started within GRASS GUI, choosing console tab, entering example rstudio, another R graphical user interface. screendump shows listing rasters PERMANENT rstudio:","code":"$ grass Starting GRASS GIS...            __________  ___   __________    _______________          / ____/ __ \\/   | / ___/ ___/   / ____/  _/ ___/         / / __/ /_/ / /| | \\__ \\\\_  \\   / / __ / / \\__ \\        / /_/ / _, _/ ___ |___/ /__/ /  / /_/ // / ___/ /        \\____/_/ |_/_/  |_/____/____/   \\____/___//____/  Welcome to GRASS GIS 8.3.2 GRASS GIS homepage:                      https://grass.osgeo.org This version running through:            Bash Shell (/bin/bash) Help is available with the command:      g.manual -i See the licence terms with:              g.version -c See citation options with:               g.version -x If required, restart the GUI with:       g.gui wxpython When ready to quit enter:                exit  Launching <wxpython> GUI in the background, please wait... GRASS nc_basic_spm_grass7/rsb:~ > R  R version 4.3.3 (2024-02-29) -- \"Angel Food Cake\" Copyright (C) 2024 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit)  ...  > library(rgrass) GRASS GIS interface loaded with GRASS version: GRASS 8.3.2 (2024) and location: nc_basic_spm_grass7 > execGRASS(\"g.list\", type=\"raster\", mapset=\"PERMANENT\") basins elevation elevation_shade geology lakes landuse soils > q() Save workspace image? [y/n/c]: n GRASS nc_basic_spm_grass7/rsb:github-rsb > exit exit Done.  Goodbye from GRASS GIS"},{"path":"https://osgeo.github.io/rgrass/articles/use.html","id":"starting-grass-inside-r","dir":"Articles","previous_headings":"","what":"Starting GRASS inside R","title":"Use of GRASS interface","text":"spgrass6 0.6-3, also possible start GRASS session running R session using initGRASS() function. done setting GRASS environment variables R session (https://grass.osgeo.org/grass-stable/manuals/variables.html). may useful set environment variable value GISBASE, shown example GRASS terminal console: Starting R suitable environment variable set lets us retrieve later needed. loaded attached, rgrass reports seems GRASS running: Windows, GRASS installed OSGeo4W installer, R session must started OSGeo4W shell, including starting RStudio. using OSGeo4W shell, found Windows left app navbar (example QGIS app group, also found OSGeo4W app group):  note standard PATH Rgui RStudio apps overwritten, program name entered full path, example \"C:\\Program Files\\R\\R-4.3.3\\bin\\x64\\Rgui.exe\" \"C:\\Program Files\\RStudio\\rstudio.exe\" quotes space. addition, working directory user-writeable, also needs changed using Rgui, RStudio changes directory Windows treats home directory. First Rgui:  RStudio:  cases, warnings can seen loading terra associated RStudio, Rgui R, case caused OSGeo4W express installer installing correct plugins GDAL version installed default. Using OSGeo4W custom installer OSGeo4W Setup (also left app navbar), latest version GDAL can installed, resolving non-critical warnings. started OSGeo4W shell, non-standard placing files environment variables confuses function initGRASS exit error confusion leads errors. details, see https://github.com/osgeo/rgrass/issues/16 https://lists.osgeo.org/pipermail/grass-stats/2018-November/001800.html. restriction applies use GRASS QGIS Windows standalone installations, may used initGRASS R session started OSGeo4W shell shipped part standalone installer (see https://github.com/osgeo/rgrass/issues/87). QGIS Windows standalone installer may used install GRASS rgrass, GRASS run within R, R RStudio must started OSGeo4W shell installed time QGIS Windows standalone installer:  started required OSGeo4W shell, function exit error confusion leads errors.  Starting GRASS R may use temporary existing GRASS LOCATION, already demonstrated temporary directory case OSGeo4W QGIS standalone installer cases.","code":"GRASS nc_basic_spm_grass7/rsb:github-rsb > echo $GISBASE /home/rsb/topics/grass/g832/grass83 $ GRASS_INSTALLATION=/home/rsb/topics/grass/g832/grass83 R  R version 4.3.3 (2024-02-29) -- \"Angel Food Cake\" Copyright (C) 2024 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit)  ...  > library(rgrass) GRASS GIS interface loaded with GRASS version: GRASS 8.3.2 (2024) and location: nc_basic_spm_grass7"},{"path":"https://osgeo.github.io/rgrass/articles/use.html","id":"temporary-grass-location","dir":"Articles","previous_headings":"Starting GRASS inside R","what":"Temporary GRASS location","title":"Use of GRASS interface","text":"don’t pass existing location initGRASS(), temporary GRASS location created set. ’ll use raster file provided terra: first argument initGRASS() gisBase=, passing value environment variable checking directory. second argument write GISRC file. third template raster (\"SpatRaster\" object) clone temporary location size, position, resolution projection: gisBase argument missing, initGRASS() minimal effort guessing . Firstly, GRASS_INSTALLATION environment variable available, value automatically used gisBase. , system command grass --config path tried get value GISBASE corresponds GRASS installation system PATH (). can seen, initGRASS() creates environment GRASS variables, also many files location mapsets; g.gisenv also shows details: may now write R objects temporary GRASS location manipulation analysis, calculating slope aspect layers:","code":"> library(terra) terra 1.7.71 > f <- system.file(\"ex/elev.tif\", package=\"terra\") > r <- rast(f) > GRASS_INSTALLATION <- Sys.getenv(\"GRASS_INSTALLATION\") > file.info(GRASS_INSTALLATION)$isdir [1] TRUE > loc <- initGRASS(gisBase=GRASS_INSTALLATION, home=tempdir(), SG=r, override=TRUE) > list.files(file.path(loc$GISDBASE, loc$LOCATION_NAME), recursive=TRUE) [1] \"file28aaf6dc1c44c/WIND\"          \"file28aaf6dc1c44c/windows/input\" [3] \"PERMANENT/DEFAULT_WIND\"          \"PERMANENT/PROJ_EPSG\"             [5] \"PERMANENT/PROJ_INFO\"             \"PERMANENT/PROJ_SRID\"             [7] \"PERMANENT/PROJ_UNITS\"            \"PERMANENT/PROJ_WKT\"              [9] \"PERMANENT/WIND\"                  > execGRASS(\"g.gisenv\") GISDBASE='/tmp/Rtmpe7QdVd'; LOCATION_NAME='file28aaf5be4b905'; MAPSET='file28aaf6dc1c44c'; GRASS_GUI='text'; > write_RAST(r, vname=\"terra_elev\") Importing raster map <terra_elev>...  100% SpatRaster read into GRASS using r.in.gdal from file  > execGRASS(\"g.list\", type=\"raster\", mapset=loc$MAPSET) terra_elev > execGRASS(\"r.slope.aspect\", flags=\"overwrite\", elevation=\"terra_elev\", slope=\"slope\", aspect=\"aspect\")  100% Aspect raster map <aspect> complete Slope raster map <slope> complete > u1 <- read_RAST(c(\"terra_elev\", \"slope\", \"aspect\")) Checking GDAL data type and nodata value...  100% Using GDAL data type <UInt16> Exporting raster data to RRASTER format...  100% r.out.gdal complete. File <\/tmp/RtmpLsAbI6/file29f4b33cd20f6.grd> created. Checking GDAL data type and nodata value...  100% Using GDAL data type <Float32> Exporting raster data to RRASTER format...  100% r.out.gdal complete. File <\/tmp/RtmpLsAbI6/file29f4b2d2e045b.grd> created. Checking GDAL data type and nodata value...  100% Using GDAL data type <Float32> Exporting raster data to RRASTER format...  100% r.out.gdal complete. File <\/tmp/RtmpLsAbI6/file29f4b52cab445.grd> created. > u1 class       : SpatRaster  dimensions  : 90, 95, 3  (nrow, ncol, nlyr) resolution  : 0.008333326, 0.008333333  (x, y) extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) coord. ref. : lon/lat WGS 84 (EPSG:4326)  sources     : file29f4b33cd20f6.grd                 file29f4b2d2e045b.grd                 file29f4b52cab445.grd   names       :   terra_elev,        slope,       aspect  min values  : 141.00000000,   0.01416342,   0.08974174  max values  :   547.000000,     7.229438,   360.000000"},{"path":"https://osgeo.github.io/rgrass/articles/use.html","id":"existing-grass-location","dir":"Articles","previous_headings":"Starting GRASS inside R","what":"Existing GRASS location","title":"Use of GRASS interface","text":"Similarly, GRASS may started R session existing location providing gisDbase=, location= mapset= arguments valid values:","code":"$ GRASS_INSTALLATION=/home/rsb/topics/grass/g832/grass83 R  R version 4.3.3 (2024-02-29) -- \"Angel Food Cake\" Copyright (C) 2024 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit)  ...  > library(rgrass) GRASS GIS interface loaded with GRASS version: (GRASS not running) > GRASS_INSTALLATION <- Sys.getenv(\"GRASS_INSTALLATION\") > loc <- initGRASS(GRASS_INSTALLATION, home=tempdir(), gisDbase=\"/home/rsb/topics/grassdata\", location=\"nc_basic_spm_grass7\", mapset=\"rsb\", override=TRUE) > execGRASS(\"g.gisenv\") GISDBASE='/home/rsb/topics/grassdata'; LOCATION_NAME='nc_basic_spm_grass7'; MAPSET='rsb'; GRASS_GUI='text'; > execGRASS(\"g.list\", type=\"raster\", mapset=\"PERMANENT\") basins elevation elevation_shade geology lakes landuse soils"},{"path":[]},{"path":"https://osgeo.github.io/rgrass/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Roger Bivand. Author. Sebastian Jeworutzki. Contributor. Rainer Krug. Contributor. Robin Lovelace. Contributor. Markus Neteler. Contributor. Steven Pawley. Maintainer, author. Floris Vanderhaeghe. Contributor.","code":""},{"path":"https://osgeo.github.io/rgrass/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bivand R, Pawley S (2025). rgrass: Interface 'GRASS' Geographical Information System 'R'. R package version 0.5-1, https://grass.osgeo.org/, https://github.com/osgeo/rgrass, https://lists.osgeo.org/mailman/listinfo/grass-stats, https://osgeo.github.io/rgrass/.","code":"@Manual{,   title = {rgrass: Interface Between 'GRASS' Geographical Information System and 'R'},   author = {Roger Bivand and Steven Pawley},   year = {2025},   note = {R package version 0.5-1, https://grass.osgeo.org/, https://github.com/osgeo/rgrass, https://lists.osgeo.org/mailman/listinfo/grass-stats},   url = {https://osgeo.github.io/rgrass/}, }"},{"path":[]},{"path":"https://osgeo.github.io/rgrass/index.html","id":"interface-between-grass-geographical-information-system-and-r","dir":"","previous_headings":"","what":"Interface Between GRASS Geographical Information System and R","title":"Interface Between GRASS Geographical Information System and R","text":"Interpreted interface GRASS geographical information system R, based starting R within GRASS GIS environment, running free-standing R temporary existing GRASS location; package provides facilities using GRASS commands R command line, see https://osgeo.github.io/rgrass/articles/use.html. original interface GRASS package GRASS 5 (2000-2010) described Bivand (2000) (https://doi.org/10.1016/S0098-3004(00)00057-1) Bivand (2001) (https://www.r-project.org/conferences/DSC-2001/Proceedings/Bivand.pdf). succeeded spgrass6 GRASS 6 (2006-2016) rgrass7 GRASS 7 (2015-2023). rgrass package modernizes interface GRASS 8 still permitting use GRASS 7.","code":""},{"path":"https://osgeo.github.io/rgrass/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface Between GRASS Geographical Information System and R","text":"package depends GRASS GIS version 8 (later version 7 also OK). use OSGeo4W Windows (recommended), remember must start RStudio, Rgui console R within OSGeo4W shell. See workshop rgrass FOSS4G 2022 detailed introduction reproducible examples. like contribute, please see CONTRIBUTING file .github folder. detailed notes, see https://rsbivand.github.io/foss4g_2022/modernizing_220822.html.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GRASS commands — execGRASS","title":"Run GRASS commands — execGRASS","text":"functions provide interface GRASS commands run system, based values returned --interface description flag using XML parsing. required parameters omitted, declared defaults, defaults used.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GRASS commands — execGRASS","text":"","code":"execGRASS(   cmd,   flags = NULL,   ...,   parameters = NULL,   intern = NULL,   ignore.stderr = NULL,   Sys_ignore.stdout = FALSE,   Sys_wait = TRUE,   Sys_input = NULL,   Sys_show.output.on.console = TRUE,   Sys_minimized = FALSE,   Sys_invisible = TRUE,   echoCmd = NULL,   redirect = FALSE,   legacyExec = NULL )  stringexecGRASS(   string,   intern = NULL,   ignore.stderr = NULL,   Sys_ignore.stdout = FALSE,   Sys_wait = TRUE,   Sys_input = NULL,   Sys_show.output.on.console = TRUE,   Sys_minimized = FALSE,   Sys_invisible = TRUE,   echoCmd = NULL,   redirect = FALSE,   legacyExec = NULL )  doGRASS(   cmd,   flags = NULL,   ...,   parameters = NULL,   echoCmd = NULL,   legacyExec = NULL )  parseGRASS(cmd, legacyExec = NULL)  # S3 method for class 'GRASS_interface_desc' print(x, ...)  getXMLencoding()  setXMLencoding(enc)"},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GRASS commands — execGRASS","text":"cmd GRASS command name. flags character vector GRASS command flags. ... execGRASS doGRASS, GRASS module parameters given R named arguments directly. print method, arguments print method. storage modes values passed must match required GRASS, single GRASS string must character vector length 1, single GRASS integer must integer vector length 1 (may integer constant 10L), single GRASS float must numeric vector length 1. multiple values, use vectors suitable length. parameters list GRASS command parameters, used GRASS parameters given R arguments directly; two methods passing GRASS parameters may mixed. storage modes values passed must match required GRASS, single GRASS string must character vector length 1, single GRASS integer must integer vector length 1 (may integer constant 10L), single GRASS float must numeric vector length 1. multiple values, use vectors suitable length. intern default NULL, case set internally get.useInternOption; logical ('NA') indicates whether make output command R object. available unless 'popen' supported platform. ignore.stderr default NULL, taking value set set.ignore.stderrOption, logical indicating whether error messages written 'stderr' ignored. Sys_ignore.stdout, Sys_wait, Sys_input pass extra arguments system. Sys_show.output..console, Sys_minimized, Sys_invisible pass extra arguments system Windows systems . echoCmd default NULL, taking logical value set set.echoCmdOption, print GRASS command executed console. redirect default FALSE, TRUE, add \"2>&1\" command string set intern TRUE; used legacy mode. legacyExec default NULL, taking logical value set set.legacyExecOption initialised FALSE \"unix\" platforms TRUE otherwise. TRUE, use system, FALSE use system2 divert stderr temporary file record error messages warnings GRASS modules. string string representing one full GRASS statement, using shell syntax: command name, optionally followed flags parameters, separated whitespaces. Parameters follow key=value format; ’value’ contains spaces, ’value’ must quoted x object printed enc character string replace UTF-8 header XML data generated GRASS module –interface-description output internationalised messages UTF-8 (known apply French, latin1)","code":""},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GRASS commands — execGRASS","text":"parseGRASS returns GRASS_interface_desc object, doGRASS returns character string proposed GRASS command - expanded command name returned attribute, execGRASS  stringexecGRASS return system system2 return, particularly depending intern argument character strings output GRASS modules returned. intern FALSE, system returns module exit code, system2 returns module exit code \"resOut\" \"resErr\" attributes.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run GRASS commands — execGRASS","text":"parseGRASS checks see whether GRASS command parsed already cached session; , reads interface description, parses caches future use. doGRASS assembles proposed GRASS command flags parameters string, wrapping parseGRASS, execGRASS wrapper doGRASS, running command system (0.7-4, ... argument used passing extra arguments system). command string termed proposed, particular needs commands provided interface description, check made existence input objects. Support multiple parameter values added help Patrick Caldon. Support defaults direct use GRASS parameters instead parameter list suggested Rainer Krug. stringexecGRASS wrapper around execGRASS, accepts single shell statement string (following GRASS's command syntax).","code":""},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run GRASS commands — execGRASS","text":"package command fails UTF-8 error XML package, try using setXMLencoding work around problem GRASS modules declare –interface-description output UTF-8 without ensuring (French 6.4.0 RC5 latin1).","code":""},{"path":[]},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run GRASS commands — execGRASS","text":"Roger S. Bivand, e-mail: Roger.Bivand@nhh.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/execGRASS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run GRASS commands — execGRASS","text":"","code":"# Run examples if in an active GRASS session in the nc_basic_spm_grass7 Sys.setenv(\"_SP_EVOLUTION_STATUS_\" = \"2\") run <- FALSE GISRC <- Sys.getenv(\"GISRC\") if (nchar(GISRC) > 0) {   location_name <- read.dcf(GISRC)[1, \"LOCATION_NAME\"]   if (location_name == \"nc_basic_spm_grass7\") {     run <- TRUE   } }  # Save and set echo command option echoCmdOption <- get.echoCmdOption() set.echoCmdOption(TRUE) #> [1] FALSE  if (run) {   # Read and print GRASS interface description for 'r.slope.aspect'   print(parseGRASS(\"r.slope.aspect\"))    # Assemble the 'r.slope.aspect' command with specified parameters as a string   doGRASS(     \"r.slope.aspect\",     flags = c(\"overwrite\"),     elevation = \"elevation.dem\",     slope = \"slope\",     aspect = \"aspect\"   )    # Alternatively, specify parameters as a list   params <- list(elevation = \"elevation\",                  slope = \"slope\",                  aspect = \"aspect\")   doGRASS(\"r.slope.aspect\",           flags = c(\"overwrite\"),           parameters = params)    # Read and print GRASS interface description for 'r.buffer'   print(parseGRASS(\"r.buffer\"))    # Assemble the 'r.buffer' with specified parameters as as string   doGRASS(     \"r.buffer\",     flags = c(\"overwrite\"),     input = \"schools\",     output = \"bmap\",     distances = seq(1000, 15000, 1000)   )    # Alternatively, specify parameters as a list   params <- list(     input = \"schools\",     output = \"bmap\",     distances = seq(1000, 15000, 1000)   )   doGRASS(\"r.buffer\", flags = c(\"overwrite\"), parameters = params)    # Restore original echo command option   set.echoCmdOption(echoCmdOption)    # Try executing 'r.stats' command which will fail because \"fire_blocksgg\"   # does not exist in the mapset   try(res <- execGRASS(\"r.stats\", input = \"fire_blocksgg\", flags = c(\"C\", \"n\")),       silent = FALSE)    # Execute 'r.stats' with legacyExec and print the result   res <- execGRASS(     \"r.stats\",     input = \"fire_blocksgg\",     flags = c(\"C\", \"n\"),     legacyExec = TRUE   )   print(res)    # If the command failed, retrieve error message   if (res != 0) {     resERR <- execGRASS(       \"r.stats\",       input = \"fire_blocksgg\",       flags = c(\"C\", \"n\"),       redirect = TRUE,       legacyExec = TRUE     )     print(resERR)   }    # Use 'stringexecGRASS' to run a command and print the result   res <- stringexecGRASS(\"r.stats -p -l input=geology\", intern = TRUE)   print(res)    stringexecGRASS(     \"r.random.cells --overwrite --quiet output=samples distance=1000 ncells=100 seed=1\"   )    # Alternatively, run the same command using 'execGRASS'   execGRASS(     \"r.random.cells\",     flags  = c(\"overwrite\", \"quiet\"),     output = \"samples\",     distance = 1000,     ncells = 100L,     seed = 1L   ) } #> Command: r.slope.aspect  #> Description: Generates raster maps of slope, aspect, curvatures and partial derivatives from an elevation raster map. Aspect is calculated counterclockwise from east.  #> Keywords: raster, terrain, aspect, slope, curvature  #> Parameters: #>   name: elevation, type: string, required: yes, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name of input elevation raster map] #>   name: slope, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output slope raster map] #>   name: aspect, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output aspect raster map] #>   name: format, type: string, required: no, multiple: no #>   default: degrees #> [Format for reporting the slope] #>   name: precision, type: string, required: no, multiple: no #>   default: FCELL #> [Storage type for resultant raster map] #>   name: pcurvature, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output profile curvature raster map] #>   name: tcurvature, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output tangential curvature raster map] #>   name: dx, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output first order partial derivative dx (E-W slope) raster map] #>   name: dy, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output first order partial derivative dy (N-S slope) raster map] #>   name: dxx, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output second order partial derivative dxx raster map] #>   name: dyy, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output second order partial derivative dyy raster map] #>   name: dxy, type: string, required: no, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output second order partial derivative dxy raster map] #>   name: zscale, type: float, required: no, multiple: no #>   default: 1.0 #> [Multiplicative factor to convert elevation units to horizontal units] #>   name: min_slope, type: float, required: no, multiple: no #>   default: 0.0 #> [Minimum slope value (in percent) for which aspect is computed] #> Flags: #>   name: a [Do not align the current region to the raster elevation map] {FALSE} #>   name: e [Compute output at edges and near NULL values] {FALSE} #>   name: n [Default: degrees counter-clockwise from East, with flat = 0] {FALSE} #>   name: overwrite [Allow output files to overwrite existing files] {FALSE} #>   name: help [Print usage summary] {FALSE} #>   name: verbose [Verbose module output] {FALSE} #>   name: quiet [Quiet module output] {FALSE} #> GRASS command: r.slope.aspect --overwrite elevation=elevation.dem slope=slope aspect=aspect  #> GRASS command: r.slope.aspect --overwrite elevation=elevation slope=slope aspect=aspect  #> Command: r.buffer  #> Description: Creates a raster map showing buffer zones surrounding cells that contain non-NULL category values.  #> Keywords: raster, buffer  #> Parameters: #>   name: input, type: string, required: yes, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name of input raster map] #>   name: output, type: string, required: yes, multiple: no #>   keydesc: name, keydesc_count: 1 #> [Name for output raster map] #>   name: distances, type: float, required: yes, multiple: yes #> [Distance zone(s)] #>   name: units, type: string, required: no, multiple: no #>   default: meters #> [Units of distance] #> Flags: #>   name: z [Ignore zero (0) data cells instead of NULL cells] {FALSE} #>   name: overwrite [Allow output files to overwrite existing files] {FALSE} #>   name: help [Print usage summary] {FALSE} #>   name: verbose [Verbose module output] {FALSE} #>   name: quiet [Quiet module output] {FALSE} #> GRASS command: r.buffer --overwrite input=schools output=bmap distances=1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000  #> GRASS command: r.buffer --overwrite input=schools output=bmap distances=1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000  #> Error in execGRASS(\"r.stats\", input = \"fire_blocksgg\", flags = c(\"C\",  :  #>   The command: #> r.stats -C -n input=fire_blocksgg #> produced an error (1) during execution: #> ERROR: Raster map <fire_blocksgg> not found #> [1] 1 #> Warning: running command 'r.stats -C -n input=fire_blocksgg 2>&1' had status 1 #> [1] \"ERROR: Raster map <fire_blocksgg> not found\" #> attr(,\"status\") #> [1] 1 #>  [1] \"217 CZfg 35.83%\" \"262 CZlg 9.81%\"  \"270 CZig 34.04%\" \"405 CZbg 12.53%\" #>  [5] \"583 CZve 1.07%\"  \"720 CZam 0.24%\"  \"766 CZg 0.35%\"   \"862 CZam 3.05%\"  #>  [9] \"910 CZbg 2.22%\"  \"921 Km 0.62%\"    \"945 CZbg 0.00%\"  \"946 CZam 0.20%\"  #> [13] \"948 CZam 0.04%\""},{"path":"https://osgeo.github.io/rgrass/reference/gmeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads GRASS metadata from the current LOCATION — gmeta","title":"Reads GRASS metadata from the current LOCATION — gmeta","text":"GRASS LOCATION metadata read list R; helper function getLocationProj returns WKT2 string projection information. helper function gmeta2grd creates GridTopology object current GRASS mapset region definitions.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/gmeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads GRASS metadata from the current LOCATION — gmeta","text":"","code":"gmeta(ignore.stderr = FALSE, g.proj_WKT = NULL)  getLocationProj(ignore.stderr = FALSE, g.proj_WKT = NULL)  gmeta2grd(ignore.stderr = FALSE)  # S3 method for class 'gmeta' print(x, ...)  get.ignore.stderrOption()  get.stop_on_no_flags_parasOption()  get.echoCmdOption()  get.useInternOption()  get.legacyExecOption()  get.defaultFlagsOption()  get.suppressEchoCmdInFuncOption()  set.ignore.stderrOption(value)  set.stop_on_no_flags_parasOption(value)  set.echoCmdOption(value)  set.useInternOption(value)  set.legacyExecOption(value)  set.defaultFlagsOption(value)  set.suppressEchoCmdInFuncOption(value)"},{"path":"https://osgeo.github.io/rgrass/reference/gmeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads GRASS metadata from the current LOCATION — gmeta","text":"ignore.stderr default FALSE, can set TRUE silence system() output standard error; apply Windows platforms. g.proj_WKT default NULL: return WKT2 representation GRASS >= 7.6 Proj4 GRASS < 7.6; may set FALSE return Proj4 GRASS >= 7.6. x S3 object returned gmeta ... arguments passed print method value logical value setting options ignore.stderr set default package load FALSE, stop_on_no_flags_params set default package load TRUE, echoCmd set default package load FALSE. useIntern sets intern argument globally; legacyExec sets legacyExec option globally, initialized FALSE unix systems (Windows) TRUE Windows; defaultFlags initialized NULL, may character vector values c(\"quiet\", \"verbose\") suppressEchoCmdInFunc default TRUE suppresses effect echoCmd within package functions, maybe set FALSE debugging.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/gmeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads GRASS metadata from the current LOCATION — gmeta","text":"Returns list g.gisenv, g.region -g3, g.proj values.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/gmeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reads GRASS metadata from the current LOCATION — gmeta","text":"Roger S. Bivand, e-mail: Roger.Bivand@nhh.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/gmeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads GRASS metadata from the current LOCATION — gmeta","text":"","code":"run <- FALSE if (nchar(Sys.getenv(\"GISRC\")) > 0 &&     read.dcf(Sys.getenv(\"GISRC\"))[1, \"LOCATION_NAME\"] == \"nc_basic_spm_grass7\") {   run <- TRUE }  if (run) {   G <- gmeta()   print(G)    cat(getLocationProj(), \"\\n\")   cat(getLocationProj(g.proj_WKT = FALSE), \"\\n\")    grd <- gmeta2grd()   print(grd)    ncells <- prod(slot(grd, \"cells.dim\"))   df <- data.frame(k = rep(1, ncells))   mask_SG <- sp::SpatialGridDataFrame(grd, data = df)   print(summary(mask_SG)) } #> gisdbase    /tmp/grassdb  #> location    nc_basic_spm_grass7  #> mapset      PERMANENT  #> rows        1350  #> columns     1500  #> north       228500  #> south       215000  #> west        630000  #> east        645000  #> nsres       10  #> ewres       10  #> projection: #>  PROJCRS[\"NAD83(HARN) / North Carolina\", #>     BASEGEOGCRS[\"NAD83(HARN)\", #>         DATUM[\"NAD83 (High Accuracy Reference Network)\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4152]], #>     CONVERSION[\"SPCS83 North Carolina zone (meters)\", #>         METHOD[\"Lambert Conic Conformal (2SP)\", #>             ID[\"EPSG\",9802]], #>         PARAMETER[\"Latitude of false origin\",33.75, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-79, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",36.1666666666667, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",34.3333333333333, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",609601.22, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"United States (USA) - North Carolina - counties of Alamance; Alexander; Alleghany; Anson; Ashe; Avery; Beaufort; Bertie; Bladen; Brunswick; Buncombe; Burke; Cabarrus; Caldwell; Camden; Carteret; Caswell; Catawba; Chatham; Cherokee; Chowan; Clay; Cleveland; Columbus; Craven; Cumberland; Currituck; Dare; Davidson; Davie; Duplin; Durham; Edgecombe; Forsyth; Franklin; Gaston; Gates; Graham; Granville; Greene; Guilford; Halifax; Harnett; Haywood; Henderson; Hertford; Hoke; Hyde; Iredell; Jackson; Johnston; Jones; Lee; Lenoir; Lincoln; Macon; Madison; Martin; McDowell; Mecklenburg; Mitchell; Montgomery; Moore; Nash; New Hanover; Northampton; Onslow; Orange; Pamlico; Pasquotank; Pender; Perquimans; Person; Pitt; Polk; Randolph; Richmond; Robeson; Rockingham; Rowan; Rutherford; Sampson; Scotland; Stanly; Stokes; Surry; Swain; Transylvania; Tyrrell; Union; Vance; Wake; Warren; Washington; Watauga; Wayne; Wilkes; Wilson; Yadkin; Yancey.\"], #>         BBOX[33.83,-84.33,36.59,-75.38]], #>     ID[\"EPSG\",3358]]  #> PROJCRS[\"NAD83(HARN) / North Carolina\", #>     BASEGEOGCRS[\"NAD83(HARN)\", #>         DATUM[\"NAD83 (High Accuracy Reference Network)\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4152]], #>     CONVERSION[\"SPCS83 North Carolina zone (meters)\", #>         METHOD[\"Lambert Conic Conformal (2SP)\", #>             ID[\"EPSG\",9802]], #>         PARAMETER[\"Latitude of false origin\",33.75, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-79, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",36.1666666666667, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",34.3333333333333, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",609601.22, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"United States (USA) - North Carolina - counties of Alamance; Alexander; Alleghany; Anson; Ashe; Avery; Beaufort; Bertie; Bladen; Brunswick; Buncombe; Burke; Cabarrus; Caldwell; Camden; Carteret; Caswell; Catawba; Chatham; Cherokee; Chowan; Clay; Cleveland; Columbus; Craven; Cumberland; Currituck; Dare; Davidson; Davie; Duplin; Durham; Edgecombe; Forsyth; Franklin; Gaston; Gates; Graham; Granville; Greene; Guilford; Halifax; Harnett; Haywood; Henderson; Hertford; Hoke; Hyde; Iredell; Jackson; Johnston; Jones; Lee; Lenoir; Lincoln; Macon; Madison; Martin; McDowell; Mecklenburg; Mitchell; Montgomery; Moore; Nash; New Hanover; Northampton; Onslow; Orange; Pamlico; Pasquotank; Pender; Perquimans; Person; Pitt; Polk; Randolph; Richmond; Robeson; Rockingham; Rowan; Rutherford; Sampson; Scotland; Stanly; Stokes; Surry; Swain; Transylvania; Tyrrell; Union; Vance; Wake; Warren; Washington; Watauga; Wayne; Wilkes; Wilson; Yadkin; Yancey.\"], #>         BBOX[33.83,-84.33,36.59,-75.38]], #>     ID[\"EPSG\",3358]]  #> +proj=lcc +lat_0=33.75 +lon_0=-79 +lat_1=36.1666666666667 +lat_2=34.3333333333333 +x_0=609601.22 +y_0=0 +ellps=GRS80 +units=m +no_defs +type=crs  #>                       X1     X2 #> cellcentre.offset 630005 215005 #> cellsize              10     10 #> cells.dim           1500   1350 #>               Length                Class                 Mode  #>              2025000 SpatialGridDataFrame                   S4"},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate GRASS session — initGRASS","title":"Initiate GRASS session — initGRASS","text":"Run GRASS interface R session started within GRASS. general, users use initGRASS throwaway locations, use GRASS modules  R objects without need define populate location. function initializes environment variables used GRASS, .gisrc used GRASS environment variables, temporary location. Windows, OSGeo4W GRASS used, R session must started OSGeo4W shell. , non-standard placing files environment variables confuses function. toupper(gisBase) contains \"OSGEO4W64/APPS/GRASS\" \"OSGEO4W/APPS/GRASS\" (converting \"\\\" \"/\"), environment variable OSGEO4W_ROOT defined, initGRASS() exit error confusion leads errors. details, see https://github.com/osgeo/rgrass/issues/16 https://github.com/osgeo/rgrass/issues/16. restriction applies use GRASS QGIS Windows standalone installations, may used initGRASS R session started OSGeo4W shell shipped part standalone installer (see https://github.com/osgeo/rgrass/issues/87). function exit error R started QGIS OSGeo4W shell confusion leads errors. locking functions used internally, exposed experienced R/GRASS scripters needing use GRASS module \"g.mapset\" initGRASS existing GRASS location. particular, \"g.mapset\" may leave .gislock file current MAPSET, may important call unlink_.gislock clean quitting R session. remove_GISRC may used try remove file given \"GISRC\" environment variable created initGRASS argument remove_GISRC= TRUE.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate GRASS session — initGRASS","text":"","code":"initGRASS(   gisBase = NULL,   home,   SG,   gisDbase,   addon_base,   location,   mapset,   override = FALSE,   use_g.dirseps.exe = TRUE,   pid,   remove_GISRC = FALSE,   ignore.stderr = get.ignore.stderrOption() )  get.GIS_LOCK()  set.GIS_LOCK(pid)  unset.GIS_LOCK()  unlink_.gislock()  remove_GISRC()"},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate GRASS session — initGRASS","text":"gisBase directory path GRASS binaries libraries, containing bin lib subdirectories among others; NULL, set environment variable GRASS_INSTALLATION found, found, system(\"grass --config path\") tried. home directory create .gisrc file; defaults $HOME Unix systems USERPROFILE Windows systems; can usually set tempdir(). SG optional SpatRaster SpatialGrid object define DEFAULT_WIND temporary location. gisDbase missing, tempdir() used; GRASS GISDBASE directory working session. addon_base missing, assumed \"$HOME/.grass7/addons\" Unix-like platforms, MS Windows \"\\ checked existence. location missing, basename(tempfile()) used; GRASS location directory working session. mapset missing, basename(tempfile()) used; GRASS mapset directory working session. override default FALSE, set TRUE accidental trashing GRASS .gisrc files locations problem. use_g.dirseps.exe default TRUE; TRUE appears work WinGRASS Native binaries, FALSE QGIS GRASS binaries; ignored platforms. pid default .integer(round(runif(1, 1, 1000))), integer used identify GIS_LOCK; value arbitrary, probably set correctly. remove_GISRC default FALSE; TRUE, attempt unlink temporary file named \"GISRC\" environment variable R session terminates package unloaded. ignore.stderr default taking value set set.ignore.stderrOption; can set TRUE silence system() output standard error; apply Windows platforms.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate GRASS session — initGRASS","text":"function runs gmeta6 returning current values running GRASS session provides.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initiate GRASS session — initGRASS","text":"function establishes --GRASS working environment providing GRASS commands environment variable support required, may also provide temporary location use end running R session home argument set tempdir(), gisDbase argument given. Running gmeta shows location , desired archive leaving R.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initiate GRASS session — initGRASS","text":"package command fails UTF-8 error XML package, try using setXMLencoding work around problem GRASS modules declare –interface-description output UTF-8 without ensuring .","code":""},{"path":[]},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initiate GRASS session — initGRASS","text":"Roger S. Bivand, e-mail: Roger.Bivand@nhh.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/initGRASS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate GRASS session — initGRASS","text":"","code":"# Run only if GRASS installation is found and 'terra' package is installed GRASS_INSTALLATION <- Sys.getenv(\"GRASS_INSTALLATION\") run <- nzchar(GRASS_INSTALLATION) &&        file.exists(GRASS_INSTALLATION) &&        file.info(GRASS_INSTALLATION)$isdir &&        require(terra, quietly = TRUE)  if (run) {   # Plot the terra example dataset   f <- system.file(\"ex/elev.tif\", package=\"terra\")   r <- rast(f)   plot(r, col = terrain.colors(50))    # Initialize a temporary GRASS project using the example data   loc <- initGRASS(     GRASS_INSTALLATION,     home = tempdir(),     SG = r,     override = TRUE   )    # Write the example data to the GRASS database   write_RAST(r, \"elev\", flags = \"overwrite\")   execGRASS(\"r.info\", map = \"elev\")    # Calculate slope and aspect raster   execGRASS(     \"r.slope.aspect\",     flags    = \"overwrite\",     elevation = \"elev\",     slope    = \"slope\",     aspect   = \"aspect\"   )    # Read the results back into R and plot   u1 <- read_RAST(c(\"elev\", \"slope\", \"aspect\"), return_format = \"terra\")   plot(u1[[\"elev\"]], col = terrain.colors(50)) }"},{"path":"https://osgeo.github.io/rgrass/reference/read_RAST.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write GRASS raster files — read_RAST","title":"Read and write GRASS raster files — read_RAST","text":"Read GRASS raster files GRASS R terra::SpatRaster sp::SpatialGridDataFrame objects, write single columns terra::SpatRaster sp::SpatialGridDataFrame objects GRASS. return_format=\"terra\", temporary binary files r..bin r..bin used speed reasons. read_RAST() write_RAST() default use \"RRASTER\" files written read GDAL.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_RAST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write GRASS raster files — read_RAST","text":"","code":"read_RAST(   vname,   cat = NULL,   NODATA = NULL,   return_format = \"terra\",   close_OK = return_format == \"SGDF\",   flags = NULL,   Sys_ignore.stdout = FALSE,   ignore.stderr = get.ignore.stderrOption() )  write_RAST(   x,   vname,   zcol = 1,   NODATA = NULL,   flags = NULL,   ignore.stderr = get.ignore.stderrOption(),   overwrite = FALSE,   verbose = TRUE )"},{"path":"https://osgeo.github.io/rgrass/reference/read_RAST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write GRASS raster files — read_RAST","text":"vname vector GRASS raster file names mapsets current search path, set \"g.mapsets\"; file names may given fully-qualified map names using \"name@mapset\", case mapset given full path searched existence raster; one raster name found mapsets current search path, error occur, case user give fully-qualified map name. fully-qualified name used, @ replaced underscore output object. cat default NULL; NULL, must logical vector matching vname, stating (CELL) rasters return factor. NODATA default NULL, case set one less floor() data values FCELL rasters range maximum CELL Byte, UInt16 Uint32 rasters (negative values), attempt made set NODATA upper Int16 Int32 range lower range occupied; otherwise integer NODATA value (required integer GRASS r..bin). return_format default terra, optionally SGDF. close_OK default TRUE - clean possible open connections used reading metadata; may set FALSE avoid side-effect user-opened connections broken. flags default NULL, character vector, example overwrite. Sys_ignore.stdout Passed system. ignore.stderr default taking value set set.ignore.stderrOption; can set TRUE silence system() output standard error; apply Windows platforms. x terra terra::SpatRaster sp sp::SpatialGridDataFrame object, zcol Attribute column number name, overwrite default FALSE, TRUE inserts \"overwrite\" value flags argument already allow existing GRASS rasters overwritten, verbose default TRUE, report writing GRASS specified,","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_RAST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write GRASS raster files — read_RAST","text":"default returns SpatRaster object, may return legacy SpatialGridDataFrame object return_format=\"SGDF\". write_RAST silently returns object written GRASS.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_RAST.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read and write GRASS raster files — read_RAST","text":"Roger S. Bivand, e-mail: Roger.Bivand@nhh.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_RAST.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write GRASS raster files — read_RAST","text":"","code":"# Run example only if GRASS settings file indicates that the # nc_basic_spm_grass7 location is active run <- FALSE GISRC <- Sys.getenv(\"GISRC\")  if (nchar(GISRC) > 0) {   location_name <- read.dcf(GISRC)[1, \"LOCATION_NAME\"]   if (location_name == \"nc_basic_spm_grass7\") {     run <- TRUE   } }  # store original environment variables before modifying GV <- Sys.getenv(\"GRASS_VERBOSE\") Sys.setenv(\"GRASS_VERBOSE\" = 0) original_ignore_stderr <- get.ignore.stderrOption() set.ignore.stderrOption(TRUE) #> [1] FALSE  if (run) {   # Retrieve GRASS metadata and creata a new mapset   meta <- gmeta()   location_path <- file.path(meta$GISDBASE, meta$LOCATION_NAME)   previous_mapset <- meta$MAPSET   example_mapset <- \"RGRASS_EXAMPLES\"   execGRASS(\"g.mapset\", flags = \"c\", mapset = example_mapset)    # List available mapsets and raster maps   mapsets <- unlist(     strsplit(execGRASS(\"g.mapsets\", flags = \"p\", intern = TRUE), \" \")   )   print(mapsets)    execGRASS(\"g.list\", type = \"raster\", pattern = \"soils\", flags = \"m\",             intern = TRUE)   execGRASS(\"g.list\", type = \"raster\", pattern = \"soils@PERMANENT\",             mapset = \".\", flags = \"m\", intern = TRUE)   execGRASS(\"g.list\", type = \"raster\", pattern = \"soils\",             mapset = \"PERMANENT\", flags = \"m\", intern = TRUE)    # Read/write the GRASS \"landuse\" dataset as a SpatRaster   if (require(\"terra\", quietly = TRUE)) {     v1 <- read_RAST(\"landuse\", cat = TRUE, return_format = \"terra\")     print(v1)     print(inMemory(v1))      write_RAST(v1, \"landuse1\", flags = c(\"o\", \"overwrite\"))     execGRASS(\"r.stats\", flags = \"c\", input = \"landuse1\")     execGRASS(\"g.remove\", flags = \"f\", name = \"landuse1\", type = \"raster\")   }    Sys.setenv(\"_SP_EVOLUTION_STATUS_\" = \"2\")    # read the geology and elevation GRASS datasets as SpatialGridDataFrames   if (require(\"sp\", quietly = TRUE)) {     nc_basic <- read_RAST(c(\"geology\", \"elevation\"), cat = c(TRUE, FALSE),                           return_format = \"SGDF\")     print(table(nc_basic$geology))      execGRASS(\"r.stats\", flags = c(\"c\", \"l\", \"quiet\"), input = \"geology\")     boxplot(nc_basic$elevation ~ nc_basic$geology)      # Compute square root of elevation and write back to GRASS     nc_basic$sqdem <- sqrt(nc_basic$elevation)     write_RAST(nc_basic, \"sqdemSP\", zcol = \"sqdem\",                flags = c(\"quiet\", \"overwrite\"))     execGRASS(\"r.info\", map = \"sqdemSP\")      # Read the new raster data and measure read times     print(system.time(       sqdemSP <- read_RAST(c(\"sqdemSP\", \"elevation\"), return_format = \"SGDF\")     ))     print(system.time(       sqdem <- read_RAST(c(\"sqdemSP\", \"elevation\"), return_format = \"terra\"))     )     print(names(sqdem))      sqdem1 <- read_RAST(c(\"sqdemSP@RGRASS_EXAMPLES\", \"elevation@PERMANENT\"))     print(names(sqdem1))      execGRASS(\"g.remove\", flags = \"f\", name = \"sqdemSP\", type = \"raster\")      # GRASS r.mapcalc example     execGRASS(\"r.mapcalc\", expression = \"basins0 = basins - 1\",               flags = \"overwrite\")     execGRASS(\"r.stats\", flags = \"c\", input = \"basins0\")      basins0 <- read_RAST(\"basins0\", return_format = \"SGDF\")     print(table(basins0$basins0))     execGRASS(\"g.remove\", flags = \"f\", name = \"basins0\", type = \"raster\")      # Create and read a test raster     execGRASS(\"r.mapcalc\", expression = \"test_t = 66000\",               flags = \"overwrite\")     execGRASS(\"r.info\", flags = \"r\", map = \"test_t\", intern = TRUE)     tt <- read_RAST(\"test_t\")     execGRASS(\"g.remove\", flags = \"f\", name = \"test_t\", type = \"raster\")   }    # Restore the previous mapset and clean up   execGRASS(\"g.mapset\", mapset = previous_mapset)   if (example_mapset != previous_mapset) {     unlink(file.path(location_path, example_mapset), recursive = TRUE)   } } #> [1] \"RGRASS_EXAMPLES\" \"PERMANENT\"       #> terra 1.8.5 #> class       : SpatRaster  #> dimensions  : 620, 1630, 1  (nrow, ncol, nlyr) #> resolution  : 500, 500  (x, y) #> extent      : 120000, 935000, 10000, 320000  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=lcc +lat_0=33.75 +lon_0=-79 +lat_1=36.1666666666667 +lat_2=34.3333333333333 +x_0=609601.22 +y_0=0 +ellps=GRS80 +units=m +no_defs  #> source      : file1d483531390e.grd  #> categories  : label  #> name        :     label  #> min value   : undefined  #> max value   :  sediment  #> [1] FALSE #> SpatRaster read into GRASS using r.in.gdal from file #> 1 226 #> 2 2 #> 3 81 #> 4 65 #> 5 415 #> 6 20 #> 7 1 #> * 1009790 #> Warning: non-unique category labels; category number appended #>  #> CZfg_217 CZlg_262 CZig_270 CZbg_405 CZve_583 CZam_720  CZg_766 CZam_862  #>      292       78      277      102        8        1        2       25  #> CZbg_910   Km_921 CZam_946  #>       18        5        2  #> 217 CZfg 292 #> 262 CZlg 78 #> 270 CZig 277 #> 405 CZbg 102 #> 583 CZve 8 #> 720 CZam 1 #> 766 CZg 2 #> 862 CZam 25 #> 910 CZbg 18 #> 921 Km 5 #> 946 CZam 2 #> * no data 1009790  #> SpatialGridDataFrame read into GRASS using r.in.bin #>  +----------------------------------------------------------------------------+ #>  | Map:      sqdemSP                        Date: Fri Jan  3 13:33:40 2025    | #>  | Mapset:   RGRASS_EXAMPLES                Login of Creator: runner          | #>  | Location: nc_basic_spm_grass7                                              | #>  | DataBase: /tmp/grassdb                                                     | #>  | Title:                                                                     | #>  | Timestamp: none                                                            | #>  |----------------------------------------------------------------------------| #>  |                                                                            | #>  |   Type of Map:  raster               Number of Categories: 0               | #>  |   Data Type:    DCELL                                                      | #>  |   Rows:         620                                                        | #>  |   Columns:      1630                                                       | #>  |   Total Cells:  1010600                                                    | #>  |        Projection: Lambert Conformal Conic                                 | #>  |            N:     320000    S:      10000   Res:   500                     | #>  |            E:     935000    W:     120000   Res:   500                     | #>  |   Range of data:    min = 7.59028829155237  max = 12.3394764902613         | #>  |                                                                            | #>  |   Data Description:                                                        | #>  |    generated by r.in.bin                                                   | #>  |                                                                            | #>  |   Comments:                                                                | #>  |    r.in.bin --overwrite --quiet -d input=\"/tmp/grassdb/nc_basic_spm_gra\\   | #>  |    ss7/RGRASS_EXAMPLES/.tmp/fv-az1272-336/X834\" output=\"sqdemSP\" bytes=\\   | #>  |    8 header=0 bands=1 order=\"native\" north=320000 south=10000 east=9350\\   | #>  |    00 west=120000 rows=620 cols=1630 anull=6                               | #>  |                                                                            | #>  +----------------------------------------------------------------------------+ #>  #>    user  system elapsed  #>   0.769   0.504   0.859  #>    user  system elapsed  #>   0.664   0.867   0.724  #> [1] \"sqdemSP\"   \"elevation\" #> [1] \"sqdemSP_RGRASS_EXAMPLES\" \"elevation_PERMANENT\"     #> 1 48 #> 3 31 #> 7 32 #> 9 5 #> 11 136 #> 13 22 #> 15 34 #> 17 12 #> 19 108 #> 21 38 #> 23 27 #> 25 35 #> 27 74 #> 29 22 #> * 1009976 #>  #>   1   3   7   9  11  13  15  17  19  21  23  25  27  29  #>  48  31  32   5 136  22  34  12 108  38  27  35  74  22   # Restore original GRASS settings Sys.setenv(\"GRASS_VERBOSE\" = GV) set.ignore.stderrOption(original_ignore_stderr) #> [1] TRUE"},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write GRASS vector object files — read_VECT","title":"Read and write GRASS vector object files — read_VECT","text":"read_VECT moves one GRASS vector object file attribute data temporary GeoPackage file terra::SpatVector object; write_VECT moves terra::SpatVector object temporary GeoPackage file GRASS vector object file. vect2neigh returns neighbour pairs shared boundary length described Markus Neteler, https://stat.ethz.ch/pipermail/r-sig-geo/2005-October/000616.html. cygwin_clean_temp can called try clean GRASS mapset-specific temporary directory cygwin.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write GRASS vector object files — read_VECT","text":"","code":"read_VECT(   vname,   layer = \"\",   proxy = FALSE,   use_gdal_grass_driver = TRUE,   type = NULL,   flags = \"overwrite\",   Sys_ignore.stdout = FALSE,   ignore.stderr = get.ignore.stderrOption() )  write_VECT(   x,   vname,   flags = \"overwrite\",   ignore.stderr = get.ignore.stderrOption() )  vInfo(vname, layer, ignore.stderr = NULL)  vColumns(vname, layer, ignore.stderr = NULL)  vDataCount(vname, layer, ignore.stderr = NULL)  vect2neigh(   vname,   ID = NULL,   ignore.stderr = NULL,   remove = TRUE,   vname2 = NULL,   units = \"k\" )"},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write GRASS vector object files — read_VECT","text":"vname GRASS vector file name. layer layer name (string); missing first layer used. proxy Default FALSE. Set TRUE need SpatVectorProxy object. use_gdal_grass_driver Default TRUE. standalone GDAL-GRASS driver vector format used installed. advantage intermediate file needs written GRASS GIS subsequently read R; instead vector layer read directly GRASS GIS database. Please read Note !. type override type detection multiple types non-zero, passed v..ogr. flags Character vector containing additional optional flags /options v..ogr, particularly \"o\" \"overwrite\". Sys_ignore.stdout Passed system. ignore.stderr default value set set.ignore.stderrOption; NULL, taking value set set.ignore.stderrOption, can set TRUE silence system() output standard error; apply Windows platforms. x SpatVector object moved GRASS. ID valid DB column name unique identifiers (optional). remove default TRUE, remove copied vectors created vect2neigh. vname2 previous run, remove FALSE, name temporary vector may given circumvent generation. units default \"k\"; see GRASS 'v..db' manual page alternatives.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write GRASS vector object files — read_VECT","text":"read_VECT imports GRASS vector layer SpatVector SpatVectorProxy object. vect2neigh returns data frame object left right neighbours boundary lengths, also given class GRASSneigh spatial.neighbour (used spdep). incantation retrieve neighbours list sn2listw(vect2neigh())$neighbours, retrieve boundary lengths: sn2listw(vect2neigh())$weights. GRASSneigh object two useful attributes: external vector giving length shared boundary polygon external area, total giving polygon's total boundary length.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read and write GRASS vector object files — read_VECT","text":"aware GDAL-GRASS driver may issues vector data. experience, error warning messages vector data can ignored. , returned metadata coordinate reference system may currently incomplete, e.g. may miss EPSG code.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read and write GRASS vector object files — read_VECT","text":"Roger S. Bivand, e-mail: Roger.Bivand@nhh.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/read_VECT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write GRASS vector object files — read_VECT","text":"","code":"# Run example if in active GRASS nc_basic_spm_grass7 location run <- FALSE if (nchar(Sys.getenv(\"GISRC\")) > 0 &&     read.dcf(Sys.getenv(\"GISRC\"))[1, \"LOCATION_NAME\"] == \"nc_basic_spm_grass7\") {   run <- TRUE }  # Store original environment variable settings GV <- Sys.getenv(\"GRASS_VERBOSE\") Sys.setenv(\"GRASS_VERBOSE\" = 0) ois <- get.ignore.stderrOption() set.ignore.stderrOption(TRUE) #> [1] FALSE  if (run) {   # Create a new mapset   meta <- gmeta()   location_path <- file.path(meta$GISDBASE, meta$LOCATION_NAME)   previous_mapset <- meta$MAPSET   example_mapset <- \"RGRASS_EXAMPLES\"   execGRASS(\"g.mapset\", \"c\", mapset = example_mapset)    # Report basic metadata about the schools dataset   execGRASS(\"v.info\", map = \"schools\", layer = \"1\")   print(vInfo(\"schools\"))    # Read/write as a SpatVector   schs <- read_VECT(\"schools\")   print(summary(schs))    try({     write_VECT(schs, \"newsch\", flags = c(\"o\", \"overwrite\"))   })   schs <- read_VECT(\"schools\", use_gdal_grass_driver = FALSE)    write_VECT(schs, \"newsch\", flags = c(\"o\", \"overwrite\"))   execGRASS(\"v.info\", map = \"newsch\", layer = \"1\")    nschs <- read_VECT(\"newsch\")   print(summary(nschs))    print(all.equal(names(nschs), as.character(vColumns(\"newsch\")[, 2])))    # Show metadata for the roadsmajor dataset and read as spatVector   print(vInfo(\"roadsmajor\"))   roads <- read_VECT(\"roadsmajor\")   print(summary(roads)) } #>  +----------------------------------------------------------------------------+ #>  | Name:            schools                                                   | #>  | Mapset:          PERMANENT                                                 | #>  | Location:        nc_basic_spm_grass7                                       | #>  | Database:        /tmp/grassdb                                              | #>  | Title:           Wake County schools (points map)                          | #>  | Map scale:       1:1                                                       | #>  | Name of creator: helena                                                    | #>  | Organization:    NC OneMap                                                 | #>  | Source date:     Tue Nov  7 19:34:09 2006                                  | #>  | Timestamp (first layer): none                                              | #>  |----------------------------------------------------------------------------| #>  | Map format:      native                                                    | #>  |----------------------------------------------------------------------------| #>  |   Type of map: vector (level: 2)                                           | #>  |                                                                            | #>  |   Number of points:       167             Number of centroids:  0          | #>  |   Number of lines:        0               Number of boundaries: 0          | #>  |   Number of areas:        0               Number of islands:    0          | #>  |                                                                            | #>  |   Map is 3D:              No                                               | #>  |   Number of dblinks:      1                                                | #>  |                                                                            | #>  |   Projection: Lambert Conformal Conic                                      | #>  |                                                                            | #>  |               N:   248159.84441077    S:   203559.01136227                 | #>  |               E:   671714.55110786    W:   619215.13388253                 | #>  |                                                                            | #>  |   Digitization threshold: 0                                                | #>  |   Comment:                                                                 | #>  |                                                                            | #>  +----------------------------------------------------------------------------+ #>  #>      nodes     points      lines boundaries  centroids      areas    islands  #>          0        167          0          0          0          0          0  #> primitives      map3d  #>        167          0  #>       cat            TAG             NAMESHORT           NAMELONG         #>  Min.   :  1.0   Length:167         Length:167         Length:167         #>  1st Qu.: 42.5   Class :character   Class :character   Class :character   #>  Median : 84.0   Mode  :character   Mode  :character   Mode  :character   #>  Mean   : 84.0                                                            #>  3rd Qu.:125.5                                                            #>  Max.   :167.0                                                            #>                                                                           #>    CORECAPACI       MOBILEUNIT       MOBILECAPA      GLEVEL          #>  Min.   :   0.0   Min.   : 0.000   Min.   :0.00   Length:167         #>  1st Qu.: 498.5   1st Qu.: 0.000   1st Qu.:0.75   Class :character   #>  Median : 586.0   Median : 6.000   Median :1.50   Mode  :character   #>  Mean   : 763.7   Mean   : 7.318   Mean   :1.75                      #>  3rd Qu.: 903.0   3rd Qu.:11.000   3rd Qu.:2.50                      #>  Max.   :2294.0   Max.   :49.000   Max.   :4.00                      #>  NA's   :23       NA's   :19       NA's   :163                       #>    LOGRADE            HIGRADE            CALENDAR           HASBASE          #>  Length:167         Length:167         Length:167         Length:167         #>  Class :character   Class :character   Class :character   Class :character   #>  Mode  :character   Mode  :character   Mode  :character   Mode  :character   #>                                                                              #>                                                                              #>                                                                              #>                                                                              #>    ISMAGNET            PHONE            ADDRNUMBER         ADDRPREFIX        #>  Length:167         Length:167         Length:167         Length:167         #>  Class :character   Class :character   Class :character   Class :character   #>  Mode  :character   Mode  :character   Mode  :character   Mode  :character   #>                                                                              #>                                                                              #>                                                                              #>                                                                              #>    ADDRROOT           ADDRTYPE          ADDRSUFFIX          ADDRCITY         #>  Length:167         Length:167         Length:167         Length:167         #>  Class :character   Class :character   Class :character   Class :character   #>  Mode  :character   Mode  :character   Mode  :character   Mode  :character   #>                                                                              #>                                                                              #>                                                                              #>                                                                              #>   ADDRZIPCOD             SPED        STATUS             NODEID          #>  Length:167         Min.   : NA   Length:167         Length:167         #>  Class :character   1st Qu.: NA   Class :character   Class :character   #>  Mode  :character   Median : NA   Mode  :character   Mode  :character   #>                     Mean   :NaN                                         #>                     3rd Qu.: NA                                         #>                     Max.   : NA                                         #>                     NA's   :167                                         #>    CAPACITYTO         ESL             BOARDDIS2            PROJ_CAP      #>  Min.   :   0.0   Length:167         Length:167         Min.   :   0.0   #>  1st Qu.: 543.0   Class :character   Class :character   1st Qu.: 497.0   #>  Median : 761.0   Mode  :character   Mode  :character   Median : 722.0   #>  Mean   : 867.0                                         Mean   : 793.1   #>  3rd Qu.: 992.5                                         3rd Qu.: 975.0   #>  Max.   :2294.0                                         Max.   :2390.0   #>  NA's   :20                                             NA's   :2        #>     NOTES           #>  Length:167         #>  Class :character   #>  Mode  :character   #>                     #>                     #>                     #>                     #>  +----------------------------------------------------------------------------+ #>  | Name:            newsch                                                    | #>  | Mapset:          RGRASS_EXAMPLES                                           | #>  | Location:        nc_basic_spm_grass7                                       | #>  | Database:        /tmp/grassdb                                              | #>  | Title:                                                                     | #>  | Map scale:       1:1                                                       | #>  | Name of creator: runner                                                    | #>  | Organization:                                                              | #>  | Source date:     Fri Jan  3 13:33:46 2025                                  | #>  | Timestamp (first layer): none                                              | #>  |----------------------------------------------------------------------------| #>  | Map format:      native                                                    | #>  |----------------------------------------------------------------------------| #>  |   Type of map: vector (level: 2)                                           | #>  |                                                                            | #>  |   Number of points:       167             Number of centroids:  0          | #>  |   Number of lines:        0               Number of boundaries: 0          | #>  |   Number of areas:        0               Number of islands:    0          | #>  |                                                                            | #>  |   Map is 3D:              No                                               | #>  |   Number of dblinks:      1                                                | #>  |                                                                            | #>  |   Projection: Lambert Conformal Conic                                      | #>  |                                                                            | #>  |               N:   248159.84441077    S:   203559.01136227                 | #>  |               E:   671714.55110786    W:   619215.13388253                 | #>  |                                                                            | #>  |   Digitization threshold: 0                                                | #>  |   Comment:                                                                 | #>  |                                                                            | #>  +----------------------------------------------------------------------------+ #>  #>       cat             cat_           TAG             NAMESHORT         #>  Min.   :  1.0   Min.   :  1.0   Length:167         Length:167         #>  1st Qu.: 42.5   1st Qu.: 42.5   Class :character   Class :character   #>  Median : 84.0   Median : 84.0   Mode  :character   Mode  :character   #>  Mean   : 84.0   Mean   : 84.0                                         #>  3rd Qu.:125.5   3rd Qu.:125.5                                         #>  Max.   :167.0   Max.   :167.0                                         #>                                                                        #>    NAMELONG           CORECAPACI       MOBILEUNIT       MOBILECAPA   #>  Length:167         Min.   :   0.0   Min.   : 0.000   Min.   :0.00   #>  Class :character   1st Qu.: 498.5   1st Qu.: 0.000   1st Qu.:0.75   #>  Mode  :character   Median : 586.0   Median : 6.000   Median :1.50   #>                     Mean   : 763.7   Mean   : 7.318   Mean   :1.75   #>                     3rd Qu.: 903.0   3rd Qu.:11.000   3rd Qu.:2.50   #>                     Max.   :2294.0   Max.   :49.000   Max.   :4.00   #>                     NA's   :23       NA's   :19       NA's   :163    #>     GLEVEL            LOGRADE            HIGRADE            CALENDAR         #>  Length:167         Length:167         Length:167         Length:167         #>  Class :character   Class :character   Class :character   Class :character   #>  Mode  :character   Mode  :character   Mode  :character   Mode  :character   #>                                                                              #>                                                                              #>                                                                              #>                                                                              #>    HASBASE            ISMAGNET            PHONE            ADDRNUMBER        #>  Length:167         Length:167         Length:167         Length:167         #>  Class :character   Class :character   Class :character   Class :character   #>  Mode  :character   Mode  :character   Mode  :character   Mode  :character   #>                                                                              #>                                                                              #>                                                                              #>                                                                              #>   ADDRPREFIX          ADDRROOT           ADDRTYPE          ADDRSUFFIX        #>  Length:167         Length:167         Length:167         Length:167         #>  Class :character   Class :character   Class :character   Class :character   #>  Mode  :character   Mode  :character   Mode  :character   Mode  :character   #>                                                                              #>                                                                              #>                                                                              #>                                                                              #>    ADDRCITY          ADDRZIPCOD             SPED        STATUS          #>  Length:167         Length:167         Min.   : NA   Length:167         #>  Class :character   Class :character   1st Qu.: NA   Class :character   #>  Mode  :character   Mode  :character   Median : NA   Mode  :character   #>                                        Mean   :NaN                      #>                                        3rd Qu.: NA                      #>                                        Max.   : NA                      #>                                        NA's   :167                      #>     NODEID            CAPACITYTO         ESL             BOARDDIS2         #>  Length:167         Min.   :   0.0   Length:167         Length:167         #>  Class :character   1st Qu.: 543.0   Class :character   Class :character   #>  Mode  :character   Median : 761.0   Mode  :character   Mode  :character   #>                     Mean   : 867.0                                         #>                     3rd Qu.: 992.5                                         #>                     Max.   :2294.0                                         #>                     NA's   :20                                             #>     PROJ_CAP         NOTES           #>  Min.   :   0.0   Length:167         #>  1st Qu.: 497.0   Class :character   #>  Median : 722.0   Mode  :character   #>  Mean   : 793.1                      #>  3rd Qu.: 975.0                      #>  Max.   :2390.0                      #>  NA's   :2                           #> [1] TRUE #>      nodes     points      lines boundaries  centroids      areas    islands  #>        266          0        355          0          0          0          0  #> primitives      map3d  #>        355          0  #>       cat          MAJORRDS_      ROAD_NAME          MULTILANE         #>  Min.   :  1.0   Min.   :  1.0   Length:355         Length:355         #>  1st Qu.: 89.5   1st Qu.: 91.5   Class :character   Class :character   #>  Median :178.0   Median :180.0   Mode  :character   Mode  :character   #>  Mean   :178.0   Mean   :179.8                                         #>  3rd Qu.:266.5   3rd Qu.:268.5                                         #>  Max.   :355.0   Max.   :357.0                                         #>     PROPYEAR         OBJECTID       SHAPE_LEN        #>  Min.   :   0.0   Min.   :  1.0   Min.   :   20.36   #>  1st Qu.:   0.0   1st Qu.: 89.5   1st Qu.:  763.32   #>  Median :   0.0   Median :178.0   Median : 1601.23   #>  Mean   : 192.7   Mean   :178.0   Mean   : 4934.15   #>  3rd Qu.:   0.0   3rd Qu.:266.5   3rd Qu.: 9555.59   #>  Max.   :2025.0   Max.   :355.0   Max.   :64177.26    # not run: vect2neigh() currently writes 3 new data sources in the PERMANENT # mapset, despite this mapset not being the active one. if (FALSE) {   cen_neig <- vect2neigh(\"census\")   str(cen_neig) }  # Cleanup the previously created datasets if (run) {   execGRASS(     \"g.remove\",     flags = \"f\",     name = c(\"newsch\", \"newsch1\"),     type = \"vector\"   )   execGRASS(\"g.mapset\", mapset = previous_mapset)   if (example_mapset != previous_mapset) {     unlink(file.path(location_path, example_mapset), recursive = TRUE)   } }  # Restore environment variable settings Sys.setenv(\"GRASS_VERBOSE\" = GV) set.ignore.stderrOption(ois) #> [1] TRUE"},{"path":"https://osgeo.github.io/rgrass/reference/rgrass.html","id":null,"dir":"Reference","previous_headings":"","what":"rgrass: Interface between GRASS geographical information system and R — rgrass","title":"rgrass: Interface between GRASS geographical information system and R — rgrass","text":"Interpreted interface GRASS geographical information system, versions 7 8, R, based starting R within GRASS environment, running R stand-alone creating throw-away GRASS environment within R. interface uses classes defined sp package hold spatial data.","code":""},{"path":"https://osgeo.github.io/rgrass/reference/rgrass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rgrass: Interface between GRASS geographical information system and R — rgrass","text":"Index: Note examples now use smaller subset North Carolina location: https://grass.osgeo.org/sampledata/north_carolina/nc_basic_spm_grass7.tar.gz","code":"read_RAST              read GRASS raster files write_RAST             write GRASS raster files read_VECT              read GRASS vector object files write_VECT             write GRASS vector object files gmeta                  read GRASS metadata from the current LOCATION getLocationProj        return a WKT2 string of projection information gmeta2grd              create a GridTopology object from the GRASS region vInfo                  return vector geometry information vColumns               return vector database columns information vDataCount             return count of vector database rows vect2neigh             return area neighbours with shared boundary length"},{"path":[]},{"path":"https://osgeo.github.io/rgrass/reference/rgrass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rgrass: Interface between GRASS geographical information system and R — rgrass","text":"Maintainer: Steven Pawley dr.stevenpawley@gmail.com (ORCID) Authors: Roger Bivand Roger.Bivand@nhh.(ORCID) contributors: Sebastian Jeworutzki Sebastian.Jeworutzki@rub.de (ORCID) [contributor] Rainer Krug Rainer@krugs.de (ORCID) [contributor] Robin Lovelace (ORCID) [contributor] Markus Neteler neteler@osgeo.org (ORCID) [contributor] Floris Vanderhaeghe floris.vanderhaeghe@inbo.(ORCID) [contributor]","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-05-1-development","dir":"Changelog","previous_headings":"","what":"rgrass version 0.5-1 (development)","title":"rgrass version 0.5-1 (development)","text":"see #96, transfer maintainership Steven Pawley transfer repo osgeo/rgrass - thanks Markus Neteler convert help pages roxygen2 - thanks Steven Pawley add enable Github Actions CI/CD - thanks Steven Pawley","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-04-4-2024-09-03","dir":"Changelog","previous_headings":"","what":"rgrass version 0.4-4 (2024-09-03)","title":"rgrass version 0.4-4 (2024-09-03)","text":"CRAN release: 2024-09-03 use ## IGNORE_RDIFF_BEGIN ## IGNORE_RDIFF_END regular test output","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-04-3-2024-06-19","dir":"Changelog","previous_headings":"","what":"rgrass version 0.4-3 (2024-06-19)","title":"rgrass version 0.4-3 (2024-06-19)","text":"CRAN release: 2024-06-19 see #87 - Windows QGIS standalone installations GRASS GIS can used R started OSGeo4W shell bundled installation write_VECT(): SpatVector object already refers source file, intermediate temporary file longer written get data GRASS GIS database (#93). similar shortcut already place write_RAST(). read_VECT(): provide access standalone GDAL-GRASS driver read vector data, skips step writing intermediate file (#93). Note standalone driver needs set separately. information driver’s README. read_VECT(): support reading SpatVectorProxy class terra, providing proxy argument (#93).","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-04-2-2024-03-17","dir":"Changelog","previous_headings":"","what":"rgrass version 0.4-2 (2024-03-17)","title":"rgrass version 0.4-2 (2024-03-17)","text":"CRAN release: 2024-03-17 see #84 - handling fully-qualified map names","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-04-1-2024-01-08","dir":"Changelog","previous_headings":"","what":"rgrass version 0.4-1 (2024-01-08)","title":"rgrass version 0.4-1 (2024-01-08)","text":"CRAN release: 2024-01-08 replace XML xml2 see #72","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-03-9-2023-09-10","dir":"Changelog","previous_headings":"","what":"rgrass version 0.3-9 (2023-09-10)","title":"rgrass version 0.3-9 (2023-09-10)","text":"CRAN release: 2023-09-10 reinstate grass-stable https://github.com/OSGeo/grass-website/issues/357 fix #79 thanks Adam B. Smith, use terra::.vector method rather internal slot name","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-03-8-2023-03-17","dir":"Changelog","previous_headings":"","what":"rgrass version 0.3-8 (2023-03-17)","title":"rgrass version 0.3-8 (2023-03-17)","text":"CRAN release: 2023-03-17 #73 guess gisBase= initGRASS() added SP_EVOLUTION_STATUS 2 examples #66 re-examining protect UInt maxing ; add stop required manual NODATA #68, #69 improvements vignettes, thanks Floris Vanderhaeghe Veronica Andreo","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-03-6-2022-10-11","dir":"Changelog","previous_headings":"","what":"rgrass version 0.3-6 (2022-10-11)","title":"rgrass version 0.3-6 (2022-10-11)","text":"CRAN release: 2022-10-11 macOS vignette issue","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-03-5-2022-09-29","dir":"Changelog","previous_headings":"","what":"rgrass version 0.3-5 (2022-09-29)","title":"rgrass version 0.3-5 (2022-09-29)","text":"CRAN release: 2022-09-29 #63 #64, detection GRASS path initGRASS() semi-automated grass --config path works environment variable GRASS_INSTALLATION set path, thanks Robin Lovelace correct NODATA logic read_RAST() unsigned rasters #66 thanks Laura Poggio","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-03-3-2022-08-08","dir":"Changelog","previous_headings":"","what":"rgrass version 0.3-3 (2022-08-08)","title":"rgrass version 0.3-3 (2022-08-08)","text":"CRAN release: 2022-08-08 correct vignette logic error triggered M1 stars installed","code":""},{"path":"https://osgeo.github.io/rgrass/news/index.html","id":"rgrass-version-03-2-2022-07-21","dir":"Changelog","previous_headings":"","what":"rgrass version 0.3-2 (2022-07-21)","title":"rgrass version 0.3-2 (2022-07-21)","text":"CRAN release: 2022-07-21 first release replace deprecated rgrass7 remove suggested packages planned retirement (rgdal) add vignettes remove old code working around earlier use GRASS DBF rather SQLite storing vector attributes remove use_sp() use_sf() file transfer remove code using GDAL GRASS plugin","code":""}]
